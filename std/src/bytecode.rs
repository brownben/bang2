use bang_interpreter::{
  chunk::{Chunk, OpCode},
  context::BytecodeFunctionCreator,
};

pub const ANY: fn() -> Chunk = bytecode![
  const 0,
  const "list",
  const "length",
  Import,
  GetLocal, 0,
  Call, 1,
  JumpIfNull, long 5,
  Jump, long 5,
  Pop,
  const 0,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 32,
  Pop,
  GetLocal, 1,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  Call, 1,
  JumpIfFalse, long 8,
  Pop,
  True,
  Return,
  Jump, long 3,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Loop, long 36,
  Pop,
  False,
  Return,
];

pub const ALL: fn() -> Chunk = bytecode![
  const 0,
  const "list",
  const "length",
  Import,
  GetLocal, 0,
  Call, 1,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 34,
  Pop,
  GetLocal, 1,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  Call, 1,
  Not,
  JumpIfFalse, long 8,
  Pop,
  False,
  Return,
  Jump, long 3,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Pop,
  Loop, long 38,
  Pop,
  True,
  Return,
];

pub const MAP: fn() -> Chunk = bytecode![
  const 0,
  const "list",
  const "length",
  Import,
  GetLocal, 0,
  Call, 1,
  List, 0,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 33,
  Pop,
  const "list",
  const "push",
  Import,
  GetLocal, 4,
  GetLocal, 1,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  Call,1,
  Call,2,
  Pop,
  GetLocal,2,
  const 1,
  Add,
  SetLocal,2,
  Pop,
  Loop, long 37,
  Pop,
  GetLocal, 4,
  Return,
];

pub const FILTER: fn() -> Chunk = bytecode![
  const 0,
  const "list",
  const "length",
  Import,
  GetLocal, 0,
  Call, 1,
  List, 0,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 46,
  Pop,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  GetLocal, 1,
  GetLocal, 5,
  Call, 1,
  JumpIfFalse, long 18,
  Pop,
  const "list",
  const "push",
  Import,
  GetLocal, 4,
  GetLocal, 5,
  Call, 2,
  Pop,
  Jump, long 3,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Pop,
  Pop,
  Loop, long 50,
  Pop,
  GetLocal, 4,
  Return,
];

pub const FIND: fn() -> Chunk = bytecode![
  const 0,
  const "list",
  const "length",
  Import,
  GetLocal, 0,
  Call, 1,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 37,
  Pop,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  GetLocal, 1,
  GetLocal, 4,
  Call, 1,
  JumpIfFalse, long 9,
  Pop,
  GetLocal, 4,
  Return,
  Jump, long 3,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Pop,
  Pop,
  Loop, long 41,
  Pop,
  Null,
  Return,
];

pub const FOR_EACH: fn() -> Chunk = bytecode![
  const 0,
  const "list",
  const "length",
  Import,
  GetLocal, 0,
  Call, 1,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 28,
  Pop,
  GetLocal, 1,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  Call, 1,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Pop,
  Loop, long 28,
  Pop,
  Pop,
  Pop,
  Null,
  Return,
];

pub const REDUCE: fn() -> Chunk = bytecode![
  const 0,
  const "list",
  const "length",
  Import,
  GetLocal, 0,
  Call, 1,
  GetLocal, 1,
  GetLocal, 3,
  GetLocal, 4,
  Less,
  JumpIfFalse, long 28,
  Pop,
  GetLocal, 2,
  GetLocal, 5,
  GetLocal, 0,
  GetLocal, 3,
  GetIndex,
  Call, 2,
  SetLocal, 5,
  Pop,
  GetLocal, 3,
  const 1,
  Add,
  SetLocal, 3,
  Pop,
  Loop, long 32,
  Pop,
  GetLocal, 5,
  Return,
];

pub const MAX: fn() -> Chunk = bytecode![
  const "list",
  const "length",
  Import,
  GetLocal, 0,
  Call, 1,
  const f64::NEG_INFINITY,
  const 0,
  GetLocal, 3,
  GetLocal, 1,
  Less,
  JumpIfFalse, long 38,
  Pop,
  GetLocal, 0,
  GetLocal, 3,
  GetIndex,
  GetLocal, 4,
  GetLocal, 2,
  Greater,
  JumpIfFalse, long 11,
  Pop,
  GetLocal, 4,
  SetLocal, 2,
  Pop,
  Jump, long 3,
  Pop,
  GetLocal, 3,
  const 1,
  Add,
  SetLocal, 3,
  Pop,
  Pop,
  Loop, long 42,
  Pop,
  GetLocal, 2,
  Return,
];
pub const MIN: fn() -> Chunk = bytecode![
  const "list",
  const "length",
  Import,
  GetLocal, 0,
  Call, 1,
  const f64::INFINITY,
  const 0,
  GetLocal, 3,
  GetLocal, 1,
  Less,
  JumpIfFalse, long 38,
  Pop,
  GetLocal, 0,
  GetLocal, 3,
  GetIndex,
  GetLocal, 4,
  GetLocal, 2,
  Less,
  JumpIfFalse, long 11,
  Pop,
  GetLocal, 4,
  SetLocal, 2,
  Pop,
  Jump, long 3,
  Pop,
  GetLocal, 3,
  const 1,
  Add,
  SetLocal, 3,
  Pop,
  Pop,
  Loop, long 42,
  Pop,
  GetLocal, 2,
  Return,
];
