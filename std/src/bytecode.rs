use crate::modules::list;
use bang_interpreter::{
  chunk::{Chunk, OpCode},
  context::BytecodeFunctionCreator,
};

pub const ANY: fn(BytecodeFunctionCreator) -> Chunk = bytecode![
  const 0,
  const list("length").unwrap_constant(),
  GetLocal, 0,
  Call, 1,
  JumpIfNull, long 5,
  Jump, long 5,
  Pop,
  const 0,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 32,
  Pop,
  GetLocal, 1,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  Call, 1,
  JumpIfFalse, long 8,
  Pop,
  True,
  Return,
  Jump, long 3,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Loop, long 36,
  Pop,
  False,
  Return,
];

pub const ALL: fn(BytecodeFunctionCreator) -> Chunk = bytecode![
  const 0,
  const list("length").unwrap_constant(),
  GetLocal, 0,
  Call, 1,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 34,
  Pop,
  GetLocal, 1,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  Call, 1,
  Not,
  JumpIfFalse, long 8,
  Pop,
  False,
  Return,
  Jump, long 3,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Pop,
  Loop, long 38,
  Pop,
  True,
  Return,
];

pub const MAP: fn(BytecodeFunctionCreator) -> Chunk = bytecode![
  const 0,
  const list("length").unwrap_constant(),
  GetLocal, 0,
  Call, 1,
  List, 0,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 30,
  Pop,
  const list("push").unwrap_constant(),
  GetLocal, 4,
  GetLocal, 1,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  Call,1,
  Call,2,
  Pop,
  GetLocal,2,
  const 1,
  Add,
  SetLocal,2,
  Pop,
  Loop, long 34,
  Pop,
  GetLocal, 4,
  Return,
];

pub const FILTER: fn(BytecodeFunctionCreator) -> Chunk = bytecode![
  const 0,
  const list("length").unwrap_constant(),
  GetLocal, 0,
  Call, 1,
  List, 0,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 43,
  Pop,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  GetLocal, 1,
  GetLocal, 5,
  Call, 1,
  JumpIfFalse, long 15,
  Pop,
  const list("push").unwrap_constant(),
  GetLocal, 4,
  GetLocal, 5,
  Call, 2,
  Pop,
  Jump, long 3,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Pop,
  Pop,
  Loop, long 47,
  Pop,
  GetLocal, 4,
  Return,
];

pub const FIND: fn(BytecodeFunctionCreator) -> Chunk = bytecode![
  const 0,
  const list("length").unwrap_constant(),
  GetLocal, 0,
  Call, 1,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 37,
  Pop,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  GetLocal, 1,
  GetLocal, 4,
  Call, 1,
  JumpIfFalse, long 9,
  Pop,
  GetLocal, 4,
  Return,
  Jump, long 3,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Pop,
  Pop,
  Loop, long 41,
  Pop,
  Null,
  Return,
];

pub const FOR_EACH: fn(BytecodeFunctionCreator) -> Chunk = bytecode![
  const 0,
  const list("length").unwrap_constant(),
  GetLocal, 0,
  Call, 1,
  GetLocal, 2,
  GetLocal, 3,
  Less,
  JumpIfFalse, long 28,
  Pop,
  GetLocal, 1,
  GetLocal, 0,
  GetLocal, 2,
  GetIndex,
  Call, 1,
  Pop,
  GetLocal, 2,
  const 1,
  Add,
  SetLocal, 2,
  Pop,
  Loop, long 28,
  Pop,
  Pop,
  Pop,
  Null,
  Return,
];

pub const REDUCE: fn(BytecodeFunctionCreator) -> Chunk = bytecode![
  const 0,
  const list("length").unwrap_constant(),
  GetLocal, 0,
  Call, 1,
  GetLocal, 1,
  GetLocal, 3,
  GetLocal, 4,
  Less,
  JumpIfFalse, long 28,
  Pop,
  GetLocal, 2,
  GetLocal, 5,

  GetLocal, 0,
  GetLocal, 3,
  GetIndex,
  Call, 2,
  SetLocal, 5,
  Pop,
  GetLocal, 3,
  const 1,
  Add,
  SetLocal, 3,
  Pop,
  Loop, long 32,
  Pop,
  GetLocal, 5,
  Return,
];
